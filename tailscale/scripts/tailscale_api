#!/usr/bin/python3

import argparse
import json
import pprint
import re
import datetime

import requests


class TailscaleSession:
    def __init__(self, tailnet, api_key):
        self.tailnet = tailnet
        self.api_key = api_key
        self.session = requests.session()

    def _uri(self, path):
        return "https://api.tailscale.com/api/v2/" + path

    def _auth(self):
        return (self.api_key, "")

    def get(self, path, **kwargs):
        return self.session.get(self._uri(path), auth=self._auth(), **kwargs)

    def post(self, path, **kwargs):
        return self.session.post(self._uri(path), auth=self._auth(), **kwargs)

    def delete(self, path, **kwargs):
        return self.session.delete(self._uri(path), auth=self._auth(), **kwargs)

    def devices(self):
        return [TailscaleDevice(self, device_obj) for device_obj in json.loads(self.get(f"tailnet/{self.tailnet}/devices").content.decode())["devices"]]


class TailscaleDevice:
    def __init__(self, api, device_obj):
        self.api = api

        [setattr(self, v, device_obj[k]) for k,v in {
            "id": "id_",

            "addresses": "addresses",
            "authorized": "authorized",
            "blocksIncomingConnections": "blocks_incoming_connections",
            "clientVersion": "client_version",
            "created": "created",
            "expires": "expires",
            "hostname": "hostname",
            "isExternal": "is_external",
            "keyExpiryDisabled": "key_expiry_disabled",
            "lastSeen": "last_seen",
            "machineKey": "machine_key",
            "name": "name",
            "nodeKey": "node_key",
            "os": "os",
            "updateAvailable": "update_available",
            "user": "user",
        }.items()]

        self.created = self._parse_datetime(self.created)
        self.expires = self._parse_datetime(self.expires)
        self.last_seen = self._parse_datetime(self.last_seen)

    @staticmethod
    def _parse_datetime(time_str):
        return datetime.datetime.strptime(time_str, "%Y-%m-%dT%H:%M:%SZ")

    def delete(self):
        return self.api.delete(f"device/{self.id_}/")


def command_devices_list(session):
    for device in session.devices():
        print(f"{device.id_}:")
        print(f"   Name: {device.name}:")
        print(f"   Hostname: {device.hostname}")
        print(f"   Created: {device.created}")
        print(f"   Expires: {device.expires}")
        print(f"   Last Seen: {device.last_seen}")

def command_devices_cleanup_ephemeral(session):
    parser = argparse.ArgumentParser(description="Tailscale API tool (devices_cleanup_ephemeral)")
    parser.add_argument("--hostname-regex", type=str, default="^(.*?)-ephemeral(.*?)$", help="Hostname regex to select devices with")
    parser.add_argument("--hours-since-last-seen", type=int, default=1, help="Hours to wait for a device to be idle before deleting it")
    args = parser.parse_known_args()[0]

    for device in session.devices():
        if(not re.fullmatch(args.hostname_regex, device.hostname)):
            continue
        if((datetime.datetime.now() - device.last_seen).seconds < (args.hours_since_last_seen * 60 * 60)):
            continue

        print(device.id_, device.hostname, device.last_seen)
        device.delete()


def main():
    parser = argparse.ArgumentParser(description="Tailscale API tool")
    parser.add_argument("command", type=str, choices=["devices_list", "devices_cleanup_ephemeral"])
    parser.add_argument("--tailnet", type=str, default="onesignal.com", help="Tailscale tailnet name")
    parser.add_argument("--api-key", type=str, required=True, help="Tailscale API key (e.g. tskey-xxx)")
    args = parser.parse_known_args()[0]

    session = TailscaleSession(args.tailnet, args.api_key)

    {
        "devices_list": command_devices_list,
        "devices_cleanup_ephemeral": command_devices_cleanup_ephemeral,
    }[args.command](session)

if(__name__ == "__main__"):
    main()
